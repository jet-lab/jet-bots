        /*
        //const [ asks, bids, price ]: [ Orderbook, Orderbook, void] = await Promise.all([
        const [asks, bids]: [Orderbook, Orderbook] = await Promise.all([
          await markets[symbol].loadAsks(connection),
          await markets[symbol].loadBids(connection),
        ]);
        */
        //TODO
        /*
        if (configuration.verbose && asks && bids) {
          console.log(`asks = ${JSON.stringify(asks.getL2(10))}`);
          console.log(`bids = ${JSON.stringify(bids.getL2(10))}`);
        }
        */
        /*
          const [openOrdersAccountInfo]: [AccountInfo<Buffer> | null, void] =
            await Promise.all([
              await connection.getAccountInfo(
                context.bots[i].positions[symbol].openOrdersAccount,
              ),
              await context.bots[i].positions[symbol].fetchBalances(),
            ]);
          */
        //TODO
        /*
          if (configuration.verbose) {
            console.log(
              `Account balance = ${
                context.bots[i].positions[symbol].balance /
                LAMPORTS_PER_SOL
              } SOL`,
            );
            console.log(
              `Base token balance = ${JSON.stringify(
                context.bots[i].positions[symbol].baseTokenBalance,
              )}`,
            );
            console.log(
              `Quote token balance = ${JSON.stringify(
                context.bots[i].positions[symbol].quoteTokenBalance,
              )}`,
            );
          }
          */
        /*
          if (openOrdersAccountInfo) {
            const openOrders = OpenOrders.fromAccountInfo(
              context.bots[i].positions[symbol].openOrdersAccount,
              openOrdersAccountInfo,
              markets[symbol].programId,
            );

            //const [ newOrders, cancelOrders ]: [OrderParams[], Order[]] = await context.bots[i].update(symbol, asks, bids, openOrders.orders.filter((orderId) => { return !orderId.eq(new BN(0)); }));
            const [newOrders, cancelOrders]: [OrderParams[], Order[]] = await context.bots[i].update(symbol, asks, bids);
            */
        /*
            await context.bots[i].updateOrders(
              markets[symbol],
              newOrders,
              cancelOrders,
            );
            */
        /*
            if (
              openOrders.baseTokenFree.gt(new BN(0)) ||
              openOrders.quoteTokenFree.gt(new BN(0))
            ) {
              await context.bots[i].positions[symbol].settleFunds();
            }
            */
        /*
          }
          */
